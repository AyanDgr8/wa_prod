// src/controllers/kycController.js

import fetch from 'node-fetch';
import connectDB from '../db/index.js';
import bcrypt from 'bcrypt';

const initiateKYC = async (req, res) => {
    try {
        const { 
            uniqueId, 
            uid,
            f_name,
            l_name,
            email,
            phone,
            address,
            company_name,
            password,
            card_select,
            card_detail,
            company_gst
        } = req.body;

        // First save/update user registration
        const pool = await connectDB();
        const connection = await pool.getConnection();
        
        try {
            // Hash password
            const hashedPassword = await bcrypt.hash(password, 10);

            // Check if user exists
            const [existingUser] = await connection.query(
                'SELECT * FROM register WHERE email = ?',
                [email]
            );

            if (existingUser && existingUser.length > 0) {
                // Update existing user
                await connection.query(
                    `UPDATE register SET 
                        password = ?,
                        card_detail = ?,
                        company_gst = ?
                    WHERE email = ?`,
                    [hashedPassword, card_detail, company_gst || 'NOT_PROVIDED', email]
                );
            } else {
                // Create new user
                await connection.query(
                    'INSERT INTO register (username, telephone, email, password, address, card_select, card_detail, company_name, company_gst, verified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
                    [
                        `${f_name} ${l_name}`,
                        phone,
                        email,
                        hashedPassword,
                        address,
                        card_select,
                        card_detail,
                        company_name || null,
                        company_gst || 'NOT_PROVIDED',
                        'no'
                    ]
                );
            }

            // If no Aadhar provided or not using Aadhar, skip KYC
            if (!uid || card_select !== 'Aadhaar') {
                return res.json({
                    success: true,
                    proceedToLogin: true,
                    message: 'Registration successful! Please login to continue.'
                });
            }

            // Proceed with KYC
            const response = await fetch('https://svcdemo.digitap.work/ent/v3/kyc/intiate-kyc-auto', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'NjIwNzg0MTk6QmlZTDByV2RXSEF6SGk2WUhvRXVCOTlJQW9BeURpbEg='
                },
                body: JSON.stringify({ uniqueId, uid })
            });
            
            const data = await response.json();
            res.json(data);
        } finally {
            connection.release();
        }
    } catch (error) {
        console.error('KYC Initiation Error:', error);
        res.status(500).json({ error: error.message });
    }
};

const submitOTP = async (req, res) => {
    try {
        const { transactionId, fwdp, codeVerifier, otp, shareCode, email } = req.body;
        
        const response = await fetch('https://svcdemo.digitap.work/ent/v3/kyc/submit-otp', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'NjIwNzg0MTk6QmlZTDByV2RXSEF6SGk2WUhvRXVCOTlJQW9BeURpbEg='
            },
            body: JSON.stringify({
                transactionId,
                fwdp,
                codeVerifier,
                otp,
                shareCode,
                isSendPdf: true
            })
        });
        
        const data = await response.json();
        
        if (data.code === "200") {
            const pool = await connectDB();
            const connection = await pool.getConnection();
            try {
                const { model } = data;
                
                // Store customer details in database
                await connection.query(`
                    INSERT INTO customer_details (
                        unique_id, transaction_id, aadhar_number, masked_aadhar_number,
                        name, gender, dob, care_of, pass_code, pdf_link, pdf_img_link,
                        link, house, street, landmark, locality, post_office, district,
                        sub_district, vtc, pincode, state, country
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                `, [
                    model.uniqueId, model.transactionId, model.adharNumber,
                    model.maskedAdharNumber, model.name, model.gender, model.dob,
                    model.careOf, model.passCode, model.pdfLink, model.pdfImgLink,
                    model.link, model.address.house, model.address.street,
                    model.address.landmark, model.address.loc, model.address.po,
                    model.address.dist, model.address.subdist, model.address.vtc,
                    model.address.pc, model.address.state, model.address.country
                ]);

                // Update verification status
                if (email) {
                    await connection.query(
                        'UPDATE register SET verified = ? WHERE email = ?',
                        ['yes', email]
                    );
                }
            } finally {
                connection.release();
            }
        }
        
        res.json(data);
    } catch (error) {
        console.error('OTP Submission Error:', error);
        res.status(500).json({ error: error.message });
    }
};

export { initiateKYC, submitOTP };